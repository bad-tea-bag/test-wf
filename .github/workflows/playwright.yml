name: Playwright Tests

on:
  push:
    branches: [workflow]
  workflow_dispatch:

env:
  V: 0.0.5

jobs:
  request_access_tokens_and_update_secret_data:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: decode file
        run: gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.ENC_JSON }}" --output ./test.json ./test.json.gpg

      - name: Print test.json file
        run: cat test.json
        continue-on-error: true

      - name: JSON to env
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: 'test.json'
          prefix: json
          masked: false # !!! set true with secret data !!!

      - name: Print env variables
        run: |
            echo "${{ env.json_REFRESH_TOKEN_USER1 }}"
            echo "${{ env.json_REFRESH_TOKEN_USER2 }}"
            echo "${{ env.json_COMPANY_ID }}"
            
      - name: Generate random strings
        run: |
          RANDOM_STRING1=$(openssl rand -base64 16)
          echo "Random string: $RANDOM_STRING1"
          RANDOM_STRING2=$(openssl rand -base64 16)
          echo "Random string: $RANDOM_STRING2"
          RANDOM_STRING3=$(openssl rand -base64 16)
          echo "Random string: $RANDOM_STRING3"
          jq --arg rt1 "$RANDOM_STRING1" \
             --arg rt2 "$RANDOM_STRING2" \
             --arg rt3 "$RANDOM_STRING3" \
             '.REFRESH_TOKEN_USER1 = $rt1 |
              .REFRESH_TOKEN_USER2 = $rt2 |
              .COMPANY_ID = $rt3' \
             test.json > tmp.json && mv tmp.json test.json
          RANDOM_STRING4=$(openssl rand -base64 16)
          echo "Random string: $RANDOM_STRING4"
          RANDOM_STRING5=$(openssl rand -base64 16)
          echo "Random string: $RANDOM_STRING5"
          echo "BEARER_TOKEN_USER1=${RANDOM_STRING4}" > tokens.env
          echo "BEARER_TOKEN_USER2=${RANDOM_STRING5}" >> tokens.env
          cat tokens.env

      - name: Print test.json file
        run: cat test.json
        continue-on-error: true

      - name: Print Tokens.env file
        run: cat tokens.env
        continue-on-error: true

      - name: Encode new file
        run: |
          rm -f ./test.json.gpg
          gpg --batch --symmetric --cipher-algo AES256 --passphrase="${{ secrets.ENC_JSON }}" test.json
          rm -f ./test.json

      - name: Commit new encoded file    
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: update secret file
          
      - name: Add bearer tokens to cache
        uses: actions/cache/save@v3
        with:
          key: bearer-tokens
          path: ./tokens.env

  smoke_tests:
    runs-on: ubuntu-latest
    needs: ["request_access_tokens_and_update_secret_data"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - uses: actions/checkout@v3 
      - name: Get bearer tokens from cache
        uses: actions/cache/restore@v3
        with:
          key: bearer-tokens
          path: ./tokens.env

      - name: Export env variables
        run: |
            if [ -f ./tokens.env ]; then
                export $(cat ./tokens.env | xargs)
                while IFS='=' read -r key value; do
                    echo "$key=$value" >> $GITHUB_ENV
                done < ./tokens.env
            else
                echo "./tokens.env file not found, skipping variable export"
            fi
            if [ -z "$BEARER_TOKEN_USER1" ]; then
                echo "BEARER_TOKEN_USER1 not found, using default value"
            fi
            if [ -z "$BEARER_TOKEN_USER2" ]; then
                echo "BEARER_TOKEN_USER2 not found, using default value"
            fi
            
            echo "${{ env.BEARER_TOKEN_USER1 }}"
            echo "${{ env.BEARER_TOKEN_USER2 }}"

      #- name: Set up Node.js
        #uses: actions/setup-node@v3
        #with:
          #node-version: '23.6.0'

      #- name: Install ci dependency
        #run: npm ci

      #- name: Install browsers
        #run: npx playwright install chromium

      #- name: Run Playwright tests
        #run: npx playwright test tests/example.spec.ts
